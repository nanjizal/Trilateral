// Generated by Haxe 3.4.0 (git build development @ 4a40be3)
(function ($global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var htmlHelper_webgl_WebGLSetup = function(width_,height_,autoChild) {
	if(autoChild == null) {
		autoChild = true;
	}
	this.colors = [];
	this.indices = [];
	this.vertices = [];
	this.matrix32Array = new Float32Array([1.0,0.0,0.0,0.0,0.0,1.1,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0]);
	this.modelViewProjection = new khaMath_Matrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.bgAlpha = 1.;
	this.bgBlue = 1.;
	this.bgGreen = 1.;
	this.bgRed = 1.;
	this.width = width_;
	this.height = height_;
	this.canvas = window.document.createElement("canvas");
	this.canvas.width = this.width;
	this.canvas.height = this.height;
	var style = this.canvas.style;
	style.paddingLeft = "0px";
	style.paddingTop = "0px";
	style.left = Std.string(0 + "px");
	style.top = Std.string(0 + "px");
	style.position = "absolute";
	if(autoChild) {
		window.document.body.appendChild(this.canvas);
	}
	this.gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.canvas,null);
};
htmlHelper_webgl_WebGLSetup.__name__ = true;
htmlHelper_webgl_WebGLSetup.prototype = {
	setupProgram: function(vertexString,fragmentString) {
		var gl = this.gl;
		var vertexShader = gl.createShader(35633);
		gl.shaderSource(vertexShader,vertexString);
		gl.compileShader(vertexShader);
		var gl1 = this.gl;
		var fragmentShader = gl1.createShader(35632);
		gl1.shaderSource(fragmentShader,fragmentString);
		gl1.compileShader(fragmentShader);
		var gl2 = this.gl;
		var program = gl2.createProgram();
		gl2.attachShader(program,vertexShader);
		gl2.attachShader(program,fragmentShader);
		gl2.linkProgram(program);
		gl2.useProgram(program);
		this.program = program;
		return this.program;
	}
	,render: function() {
		this.gl.clearColor(this.bgRed,this.bgGreen,this.bgBlue,this.bgAlpha);
		this.gl.enable(2884);
		this.gl.cullFace(1029);
		this.gl.clear(16384);
		this.gl.viewport(0,0,this.canvas.width,this.canvas.height);
		var modelViewProjectionID = this.gl.getUniformLocation(this.program,"modelViewProjection");
		var m = this.modelViewProjection;
		this.matrix32Array.set([m._00,m._10,m._20,m._30,m._01,m._11,m._21,m._31,m._02,m._12,m._22,m._32,m._03,m._13,m._23,m._33]);
		this.gl.uniformMatrix4fv(modelViewProjectionID,false,this.matrix32Array);
		this.gl.drawArrays(4,0,this.indices.length);
	}
	,__class__: htmlHelper_webgl_WebGLSetup
};
var Test = function() {
	this.bird_d = "M210.333,65.331C104.367,66.105-12.349,150.637,1.056,276.449c4.303,40.393,18.533,63.704,52.171,79.03c36.307,16.544,57.022,54.556,50.406,112.954c-9.935,4.88-17.405,11.031-19.132,20.015c7.531-0.17,14.943-0.312,22.59,4.341c20.333,12.375,31.296,27.363,42.979,51.72c1.714,3.572,8.192,2.849,8.312-3.078c0.17-8.467-1.856-17.454-5.226-26.933c-2.955-8.313,3.059-7.985,6.917-6.106c6.399,3.115,16.334,9.43,30.39,13.098c5.392,1.407,5.995-3.877,5.224-6.991c-1.864-7.522-11.009-10.862-24.519-19.229c-4.82-2.984-0.927-9.736,5.168-8.351l20.234,2.415c3.359,0.763,4.555-6.114,0.882-7.875c-14.198-6.804-28.897-10.098-53.864-7.799c-11.617-29.265-29.811-61.617-15.674-81.681c12.639-17.938,31.216-20.74,39.147,43.489c-5.002,3.107-11.215,5.031-11.332,13.024c7.201-2.845,11.207-1.399,14.791,0c17.912,6.998,35.462,21.826,52.982,37.309c3.739,3.303,8.413-1.718,6.991-6.034c-2.138-6.494-8.053-10.659-14.791-20.016c-3.239-4.495,5.03-7.045,10.886-6.876c13.849,0.396,22.886,8.268,35.177,11.218c4.483,1.076,9.741-1.964,6.917-6.917c-3.472-6.085-13.015-9.124-19.18-13.413c-4.357-3.029-3.025-7.132,2.697-6.602c3.905,0.361,8.478,2.271,13.908,1.767c9.946-0.925,7.717-7.169-0.883-9.566c-19.036-5.304-39.891-6.311-61.665-5.225c-43.837-8.358-31.554-84.887,0-90.363c29.571-5.132,62.966-13.339,99.928-32.156c32.668-5.429,64.835-12.446,92.939-33.85c48.106-14.469,111.903,16.113,204.241,149.695c3.926,5.681,15.819,9.94,9.524-6.351c-15.893-41.125-68.176-93.328-92.13-132.085c-24.581-39.774-14.34-61.243-39.957-91.247c-21.326-24.978-47.502-25.803-77.339-17.365c-23.461,6.634-39.234-7.117-52.98-31.273C318.42,87.525,265.838,64.927,210.333,65.331zM445.731,203.01c6.12,0,11.112,4.919,11.112,11.038c0,6.119-4.994,11.111-11.112,11.111s-11.038-4.994-11.038-11.111C434.693,207.929,439.613,203.01,445.731,203.01z";
	this.scale = 0.002;
	this.appColors = [0,16711680,16744192,16776960,65280,255,4915330,9699539,4473924,3355443,789516,1118481,16777215,255,65280,16711680];
	htmlHelper_webgl_WebGLSetup.call(this,1140,1140);
	this.scale = 0.00175438596491228073;
	var dark = 0.09375;
	this.bgRed = dark;
	this.bgGreen = dark;
	this.bgBlue = dark;
	this.draw();
	this.setupProgram("attribute vec3 pos;" + "attribute vec4 color;" + "varying vec4 vcol;" + "uniform mat4 modelViewProjection;" + "void main(void) {" + " gl_Position = modelViewProjection * vec4(pos, 1.0);" + " vcol = color;" + "}","precision mediump float;" + "varying vec4 vcol;" + "void main(void) {" + " gl_FragColor = vcol;" + "}");
	this.modelViewProjection = new khaMath_Matrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	if(htmlHelper_tools_AnimateTimer.s == null) {
		htmlHelper_tools_AnimateTimer.s = window.document.createElement("style");
		htmlHelper_tools_AnimateTimer.s.innerHTML = "@keyframes spin { from { transform:rotate( 0deg ); } to { transform:rotate( 360deg ); } }";
		window.document.getElementsByTagName("head")[0].appendChild(htmlHelper_tools_AnimateTimer.s);
		htmlHelper_tools_AnimateTimer.s.animation = "spin 1s linear infinite";
		htmlHelper_tools_AnimateTimer.loop(60.0);
	}
	htmlHelper_tools_AnimateTimer.onFrame = $bind(this,this.render_);
	this.render();
};
Test.__name__ = true;
Test.main = function() {
	new Test();
};
Test.__super__ = htmlHelper_webgl_WebGLSetup;
Test.prototype = $extend(htmlHelper_webgl_WebGLSetup.prototype,{
	addPaths: function() {
		var path = new trilateral_path_RoundEnd();
		path.width = 2;
		new justPath_SvgPath(path).parse(this.bird_d,0,0,1.5,1.5);
		console.log(path.dim);
		var this1 = this.triangles;
		var triArr = path.trilateralArray;
		var _g = 0;
		while(_g < triArr.length) {
			var t = triArr[_g];
			++_g;
			if(t != null) {
				var t1 = Type.createEmptyInstance(trilateral_tri_Triangle);
				t1.id = 6;
				t1.ax = t.ax;
				t1.ay = t.ay;
				t1.bx = t.bx;
				t1.by = t.by;
				t1.cx = t.cx;
				t1.cy = t.cy;
				t1.mark = t.mark;
				t1.depth = 0;
				t1.alpha = 1.;
				t1.colorID = 7;
				t1.colorA = 7;
				t1.colorB = 7;
				t1.colorC = 7;
				t1.windingAdjusted = t.windingAdjusted;
				this1[this1.length] = t1;
			}
		}
	}
	,addJoinTestForwards2: function() {
		var path = new trilateral_path_Fine(null,null,3);
		path.width = 20;
		path.moveTo(200,450);
		if(path.widthFunction != null) {
			path.width = path.widthFunction(path.width,path.x,path.x,700,450);
		}
		path.line(700,450);
		var p = path.points[path.points.length - 1];
		var l2 = p.length;
		p[l2] = 700;
		p[l2 + 1] = 450;
		var d = path.dim[path.dim.length - 1];
		if(700 < d.minX) {
			d.minX = 700;
		}
		if(700 > d.maxX) {
			d.maxX = 700;
		}
		if(450 < d.minY) {
			d.minY = 450;
		}
		if(450 > d.maxY) {
			d.maxY = 450;
		}
		path.x = 700;
		path.y = 450;
		if(path.widthFunction != null) {
			path.width = path.widthFunction(path.width,path.x,path.x,700,700);
		}
		path.line(700,700);
		var p1 = path.points[path.points.length - 1];
		var l21 = p1.length;
		p1[l21] = 700;
		p1[l21 + 1] = 700;
		var d1 = path.dim[path.dim.length - 1];
		if(700 < d1.minX) {
			d1.minX = 700;
		}
		if(700 > d1.maxX) {
			d1.maxX = 700;
		}
		if(700 < d1.minY) {
			d1.minY = 700;
		}
		if(700 > d1.maxY) {
			d1.maxY = 700;
		}
		path.x = 700;
		path.y = 700;
		if(path.widthFunction != null) {
			path.width = path.widthFunction(path.width,path.x,path.x,450,750);
		}
		path.line(450,750);
		var p2 = path.points[path.points.length - 1];
		var l22 = p2.length;
		p2[l22] = 450;
		p2[l22 + 1] = 750;
		var d2 = path.dim[path.dim.length - 1];
		if(450 < d2.minX) {
			d2.minX = 450;
		}
		if(450 > d2.maxX) {
			d2.maxX = 450;
		}
		if(750 < d2.minY) {
			d2.minY = 750;
		}
		if(750 > d2.maxY) {
			d2.maxY = 750;
		}
		path.x = 450;
		path.y = 750;
		if(path.widthFunction != null) {
			path.width = path.widthFunction(path.width,path.x,path.x,450,700);
		}
		path.line(450,700);
		var p3 = path.points[path.points.length - 1];
		var l23 = p3.length;
		p3[l23] = 450;
		p3[l23 + 1] = 700;
		var d3 = path.dim[path.dim.length - 1];
		if(450 < d3.minX) {
			d3.minX = 450;
		}
		if(450 > d3.maxX) {
			d3.maxX = 450;
		}
		if(700 < d3.minY) {
			d3.minY = 700;
		}
		if(700 > d3.maxY) {
			d3.maxY = 700;
		}
		path.x = 450;
		path.y = 700;
		if(path.widthFunction != null) {
			path.width = path.widthFunction(path.width,path.x,path.x,200,50);
		}
		path.line(200,50);
		var p4 = path.points[path.points.length - 1];
		var l24 = p4.length;
		p4[l24] = 200;
		p4[l24 + 1] = 50;
		var d4 = path.dim[path.dim.length - 1];
		if(200 < d4.minX) {
			d4.minX = 200;
		}
		if(200 > d4.maxX) {
			d4.maxX = 200;
		}
		if(50 < d4.minY) {
			d4.minY = 50;
		}
		if(50 > d4.maxY) {
			d4.maxY = 50;
		}
		path.x = 200;
		path.y = 50;
		if(path.widthFunction != null) {
			path.width = path.widthFunction(path.width,path.x,path.x,150,450);
		}
		path.line(150,450);
		var p5 = path.points[path.points.length - 1];
		var l25 = p5.length;
		p5[l25] = 150;
		p5[l25 + 1] = 450;
		var d5 = path.dim[path.dim.length - 1];
		if(150 < d5.minX) {
			d5.minX = 150;
		}
		if(150 > d5.maxX) {
			d5.maxX = 150;
		}
		if(450 < d5.minY) {
			d5.minY = 450;
		}
		if(450 > d5.maxY) {
			d5.maxY = 450;
		}
		path.x = 150;
		path.y = 450;
		path.moveTo(0.,0.);
		var this1 = this.triangles;
		var triArr = path.trilateralArray;
		var colorID = this.appColors.indexOf(16744192);
		var _g = 0;
		while(_g < triArr.length) {
			var t = triArr[_g];
			++_g;
			if(t != null) {
				var t1 = Type.createEmptyInstance(trilateral_tri_Triangle);
				t1.id = 10;
				t1.ax = t.ax;
				t1.ay = t.ay;
				t1.bx = t.bx;
				t1.by = t.by;
				t1.cx = t.cx;
				t1.cy = t.cy;
				t1.mark = t.mark;
				t1.depth = 0;
				t1.alpha = 1.;
				t1.colorID = colorID;
				t1.colorA = colorID;
				t1.colorB = colorID;
				t1.colorC = colorID;
				t1.windingAdjusted = t.windingAdjusted;
				this1[this1.length] = t1;
			}
		}
	}
	,pieTests: function() {
		var this1 = this.triangles;
		var beta = Math.PI;
		var gamma = Math.PI / 16;
		var out = trilateral_tri__$TrilateralArray_TrilateralArray_$Impl_$._new([]);
		var step = Math.PI * 2 / 36;
		var dif;
		beta >= 0 && beta > Math.PI;
		gamma >= 0 && gamma > Math.PI;
		var theta = Math.abs(beta - gamma);
		var dif1 = beta < gamma ? theta : -theta;
		if(dif1 > 0) {
			dif = dif1;
		} else {
			dif = 2 * Math.PI + dif1;
		}
		var totalSteps = Math.ceil(Math.abs(dif) / step);
		var step1 = dif / totalSteps;
		var angle = beta;
		var cx;
		var cy;
		var bx = 0;
		var by = 0;
		var _g1 = 0;
		var _g = totalSteps + 1;
		while(_g1 < _g) {
			cx = -0.5 + 0.2 * Math.sin(angle);
			cy = 0.5 + 0.2 * Math.cos(angle);
			if(_g1++ != 0) {
				var t = new trilateral_tri_Trilateral(-0.5,0.5,bx,by,cx,cy);
				out[out.length] = t;
			}
			angle += step1;
			bx = cx;
			by = cy;
		}
		var triArr = out;
		var _g2 = 0;
		while(_g2 < triArr.length) {
			var t1 = triArr[_g2];
			++_g2;
			if(t1 != null) {
				var t2 = Type.createEmptyInstance(trilateral_tri_Triangle);
				t2.id = 0;
				t2.ax = t1.ax;
				t2.ay = t1.ay;
				t2.bx = t1.bx;
				t2.by = t1.by;
				t2.cx = t1.cx;
				t2.cy = t1.cy;
				t2.mark = t1.mark;
				t2.depth = 0;
				t2.alpha = 1.;
				t2.colorID = 1;
				t2.colorA = 1;
				t2.colorB = 1;
				t2.colorC = 1;
				t2.windingAdjusted = t1.windingAdjusted;
				this1[this1.length] = t2;
			}
		}
		var this2 = this.triangles;
		var beta1 = Math.PI;
		var gamma1 = Math.PI / 16;
		var out1 = trilateral_tri__$TrilateralArray_TrilateralArray_$Impl_$._new([]);
		var step2 = Math.PI * 2 / 36;
		var dif2;
		beta1 >= 0 && beta1 > Math.PI;
		gamma1 >= 0 && gamma1 > Math.PI;
		var theta1 = Math.abs(beta1 - gamma1);
		var dif3 = beta1 < gamma1 ? theta1 : -theta1;
		if(dif3 < 0) {
			dif2 = dif3;
		} else {
			dif2 = -2 * Math.PI + dif3;
		}
		var totalSteps1 = Math.ceil(Math.abs(dif2) / step2);
		var step3 = dif2 / totalSteps1;
		var angle1 = beta1;
		var cx1;
		var cy1;
		var bx1 = 0;
		var by1 = 0;
		var _g11 = 0;
		var _g3 = totalSteps1 + 1;
		while(_g11 < _g3) {
			cx1 = 0.5 + 0.2 * Math.sin(angle1);
			cy1 = 0.5 + 0.2 * Math.cos(angle1);
			if(_g11++ != 0) {
				var t3 = new trilateral_tri_Trilateral(0.5,0.5,bx1,by1,cx1,cy1);
				out1[out1.length] = t3;
			}
			angle1 += step3;
			bx1 = cx1;
			by1 = cy1;
		}
		var triArr1 = out1;
		var _g4 = 0;
		while(_g4 < triArr1.length) {
			var t4 = triArr1[_g4];
			++_g4;
			if(t4 != null) {
				var t5 = Type.createEmptyInstance(trilateral_tri_Triangle);
				t5.id = 0;
				t5.ax = t4.ax;
				t5.ay = t4.ay;
				t5.bx = t4.bx;
				t5.by = t4.by;
				t5.cx = t4.cx;
				t5.cy = t4.cy;
				t5.mark = t4.mark;
				t5.depth = 0;
				t5.alpha = 1.;
				t5.colorID = 2;
				t5.colorA = 2;
				t5.colorB = 2;
				t5.colorC = 2;
				t5.windingAdjusted = t4.windingAdjusted;
				this2[this2.length] = t5;
			}
		}
		var this3 = this.triangles;
		var beta2 = Math.PI;
		var gamma2 = Math.PI / 16;
		var out2 = trilateral_tri__$TrilateralArray_TrilateralArray_$Impl_$._new([]);
		var step4 = Math.PI * 2 / 36;
		var dif4;
		beta2 >= 0 && beta2 > Math.PI;
		gamma2 >= 0 && gamma2 > Math.PI;
		var theta2 = Math.abs(beta2 - gamma2);
		var clockwise = beta2 < gamma2;
		if(theta2 <= Math.PI) {
			dif4 = clockwise ? theta2 : -theta2;
		} else if(clockwise) {
			dif4 = -(2 * Math.PI - theta2);
		} else {
			dif4 = 2 * Math.PI - theta2;
		}
		var totalSteps2 = Math.ceil(Math.abs(dif4) / step4);
		var step5 = dif4 / totalSteps2;
		var angle2 = beta2;
		var cx2;
		var cy2;
		var bx2 = 0;
		var by2 = 0;
		var _g12 = 0;
		var _g5 = totalSteps2 + 1;
		while(_g12 < _g5) {
			cx2 = -0.5 + 0.2 * Math.sin(angle2);
			cy2 = -0.5 + 0.2 * Math.cos(angle2);
			if(_g12++ != 0) {
				var t6 = new trilateral_tri_Trilateral(-0.5,-0.5,bx2,by2,cx2,cy2);
				out2[out2.length] = t6;
			}
			angle2 += step5;
			bx2 = cx2;
			by2 = cy2;
		}
		var triArr2 = out2;
		var _g6 = 0;
		while(_g6 < triArr2.length) {
			var t7 = triArr2[_g6];
			++_g6;
			if(t7 != null) {
				var t8 = Type.createEmptyInstance(trilateral_tri_Triangle);
				t8.id = 0;
				t8.ax = t7.ax;
				t8.ay = t7.ay;
				t8.bx = t7.bx;
				t8.by = t7.by;
				t8.cx = t7.cx;
				t8.cy = t7.cy;
				t8.mark = t7.mark;
				t8.depth = 0;
				t8.alpha = 1.;
				t8.colorID = 3;
				t8.colorA = 3;
				t8.colorB = 3;
				t8.colorC = 3;
				t8.windingAdjusted = t7.windingAdjusted;
				this3[this3.length] = t8;
			}
		}
		var this4 = this.triangles;
		var beta3 = Math.PI;
		var gamma3 = Math.PI / 16;
		var out3 = trilateral_tri__$TrilateralArray_TrilateralArray_$Impl_$._new([]);
		var step6 = Math.PI * 2 / 36;
		var dif5;
		beta3 >= 0 && beta3 > Math.PI;
		gamma3 >= 0 && gamma3 > Math.PI;
		var theta3 = Math.abs(beta3 - gamma3);
		var clockwise1 = beta3 < gamma3;
		if(theta3 > Math.PI) {
			dif5 = clockwise1 ? theta3 : -theta3;
		} else if(clockwise1) {
			dif5 = -(2 * Math.PI - theta3);
		} else {
			dif5 = 2 * Math.PI - theta3;
		}
		var totalSteps3 = Math.ceil(Math.abs(dif5) / step6);
		var step7 = dif5 / totalSteps3;
		var angle3 = beta3;
		var cx3;
		var cy3;
		var bx3 = 0;
		var by3 = 0;
		var _g13 = 0;
		var _g7 = totalSteps3 + 1;
		while(_g13 < _g7) {
			cx3 = 0.5 + 0.2 * Math.sin(angle3);
			cy3 = -0.5 + 0.2 * Math.cos(angle3);
			if(_g13++ != 0) {
				var t9 = new trilateral_tri_Trilateral(0.5,-0.5,bx3,by3,cx3,cy3);
				out3[out3.length] = t9;
			}
			angle3 += step7;
			bx3 = cx3;
			by3 = cy3;
		}
		var triArr3 = out3;
		var _g8 = 0;
		while(_g8 < triArr3.length) {
			var t10 = triArr3[_g8];
			++_g8;
			if(t10 != null) {
				var t11 = Type.createEmptyInstance(trilateral_tri_Triangle);
				t11.id = 0;
				t11.ax = t10.ax;
				t11.ay = t10.ay;
				t11.bx = t10.bx;
				t11.by = t10.by;
				t11.cx = t10.cx;
				t11.cy = t10.cy;
				t11.mark = t10.mark;
				t11.depth = 0;
				t11.alpha = 1.;
				t11.colorID = 4;
				t11.colorA = 4;
				t11.colorB = 4;
				t11.colorC = 4;
				t11.windingAdjusted = t10.windingAdjusted;
				this4[this4.length] = t11;
			}
		}
	}
	,draw: function() {
		this.triangles = trilateral_tri__$TriangleArray_TriangleArray_$Impl_$._new([]);
		this.pieTests();
		this.addJoinTestForwards2();
		this.addPaths();
	}
	,setTriangles: function(triangles,triangleColors) {
		var rgb;
		var count = 0;
		var i = 0;
		var c = 0;
		var j = 0;
		var _g = 0;
		while(_g < triangles.length) {
			var tri = triangles[_g];
			++_g;
			this.vertices[i++] = tri.ax * this.scale + -1.0;
			this.vertices[i++] = -tri.ay * this.scale + 1.0;
			this.vertices[i++] = tri.depth;
			this.vertices[i++] = tri.bx * this.scale + -1.0;
			this.vertices[i++] = -tri.by * this.scale + 1.0;
			this.vertices[i++] = tri.depth;
			this.vertices[i++] = tri.cx * this.scale + -1.0;
			this.vertices[i++] = -tri.cy * this.scale + 1.0;
			this.vertices[i++] = tri.depth;
			if(tri.mark != 0) {
				var $int = triangleColors[tri.mark];
				rgb = { r : ($int >> 16 & 255) / 255, g : ($int >> 8 & 255) / 255, b : ($int & 255) / 255};
			} else {
				var int1 = triangleColors[tri.colorID];
				rgb = { r : (int1 >> 16 & 255) / 255, g : (int1 >> 8 & 255) / 255, b : (int1 & 255) / 255};
			}
			var _g1 = 0;
			while(_g1 < 3) {
				++_g1;
				this.colors[c++] = rgb.r;
				this.colors[c++] = rgb.g;
				this.colors[c++] = rgb.b;
				this.colors[c++] = 1.;
				this.indices[j++] = count++;
			}
		}
		var gl = this.gl;
		var program = this.program;
		var vertices = this.vertices;
		var colors = this.colors;
		gl.bindBuffer(34962,gl.createBuffer());
		gl.bufferData(34962,new Float32Array(vertices),35044);
		var position = gl.getAttribLocation(program,"pos");
		gl.vertexAttribPointer(position,3,5126,false,0,0);
		gl.enableVertexAttribArray(position);
		gl.bindBuffer(34962,null);
		gl.bindBuffer(34962,gl.createBuffer());
		gl.bufferData(34962,new Float32Array(colors),35044);
		var col = gl.getAttribLocation(program,"color");
		gl.vertexAttribPointer(col,4,5126,false,0,0);
		gl.enableVertexAttribArray(col);
		gl.bindBuffer(34962,null);
	}
	,render_: function(i) {
		this.render();
	}
	,render: function() {
		this.vertices = [];
		this.indices = [];
		this.colors = [];
		this.setTriangles(this.triangles,this.appColors);
		htmlHelper_webgl_WebGLSetup.prototype.render.call(this);
	}
	,__class__: Test
});
var Type = function() { };
Type.__name__ = true;
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
var haxe_io_FPHelper = function() { };
haxe_io_FPHelper.__name__ = true;
haxe_io_FPHelper.i32ToFloat = function(i) {
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return (1 - (i >>> 31 << 1)) * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
var htmlHelper_tools_AnimateTimer = function() { };
htmlHelper_tools_AnimateTimer.__name__ = true;
htmlHelper_tools_AnimateTimer.loop = function(tim) {
	window.requestAnimationFrame(htmlHelper_tools_AnimateTimer.loop);
	if(htmlHelper_tools_AnimateTimer.onFrame != null) {
		htmlHelper_tools_AnimateTimer.onFrame(htmlHelper_tools_AnimateTimer.counter);
	}
	htmlHelper_tools_AnimateTimer.counter++;
	return true;
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html__$CanvasElement_CanvasUtil = function() { };
js_html__$CanvasElement_CanvasUtil.__name__ = true;
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var _g = 0;
	var _g1 = ["webgl","experimental-webgl"];
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		var ctx = canvas.getContext(name,attribs);
		if(ctx != null) {
			return ctx;
		}
	}
	return null;
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) this.a[_g1++] = 0;
		this.byteLength = len;
	}
};
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	new Uint8Array(result).set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Float32Array = function() { };
js_html_compat_Float32Array.__name__ = true;
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var justPath_IPathContext = function() { };
justPath_IPathContext.__name__ = true;
justPath_IPathContext.prototype = {
	__class__: justPath_IPathContext
};
var justPath_StoreF6 = function() {
	this.count = 0;
	this.l = 0;
};
justPath_StoreF6.__name__ = true;
justPath_StoreF6.prototype = {
	hasNext: function() {
		return this.count < this.l + 1;
	}
	,next: function() {
		var out = null;
		switch(this.count) {
		case 0:
			out = this.s0;
			break;
		case 1:
			out = this.s1;
			break;
		case 2:
			out = this.s2;
			break;
		case 3:
			out = this.s3;
			break;
		case 4:
			out = this.s4;
			break;
		case 5:
			out = this.s5;
			break;
		default:
		}
		this.count++;
		return out;
	}
	,__class__: justPath_StoreF6
};
var justPath_SvgPath = function(pathContext_) {
	this.sy = 1;
	this.sx = 1;
	this.dy = 0;
	this.dx = 0;
	this.lastY = 0;
	this.lastX = 0;
	this.pathContext = pathContext_;
};
justPath_SvgPath.__name__ = true;
justPath_SvgPath.prototype = {
	parse: function(str_,dx_,dy_,sx_,sy_) {
		if(sy_ == null) {
			sy_ = 1;
		}
		if(sx_ == null) {
			sx_ = 1;
		}
		if(dy_ == null) {
			dy_ = 0;
		}
		if(dx_ == null) {
			dx_ = 0;
		}
		this.str = str_;
		this.dx = dx_;
		this.dy = dy_;
		this.sx = sx_;
		this.sy = sy_;
		this.pos = 0;
		this.l = this.str.length;
		this.c = this.str.charCodeAt(this.pos++);
		this.store = new justPath_StoreF6();
		while(this.pos < this.l) {
			switch(this.c) {
			case 65:
				console.log("elliptical_Arc - not implemented");
				this.extractArgs();
				break;
			case 66:
				console.log("bearing - not implemented");
				throw new js__$Boot_HaxeError("bearing not supported please remove");
				break;
			case 67:
				this.extractArgs();
				this.controlX = this.store.s2;
				this.controlY = this.store.s3;
				this.lastX = this.store.s4;
				this.lastY = this.store.s5;
				this.pathContext.curveTo(this.store.s0,this.store.s1,this.controlX,this.controlY,this.lastX,this.lastY);
				break;
			case 72:
				this.extractArgs(false);
				this.lastX = this.store.s0 * this.sx + this.dx;
				this.pathContext.lineTo(this.lastX,this.lastY);
				break;
			case 76:
				this.extractArgs();
				this.lastX = this.store.s0;
				this.lastY = this.store.s1;
				this.pathContext.lineTo(this.lastX,this.lastY);
				break;
			case 77:
				this.extractArgs();
				this.lastX = this.store.s0;
				this.lastY = this.store.s1;
				this.pathContext.moveTo(this.lastX,this.lastY);
				break;
			case 81:
				this.extractArgs();
				this.controlX = this.store.s0;
				this.controlY = this.store.s1;
				this.lastX = this.store.s2;
				this.lastY = this.store.s3;
				this.pathContext.quadTo(this.controlX,this.controlY,this.lastX,this.lastY);
				break;
			case 83:
				this.extractArgs();
				this.controlX = 2 * this.lastX - this.controlX;
				this.controlY = 2 * this.lastY - this.controlY;
				this.pathContext.curveTo(this.controlX,this.controlY,this.store.s0,this.store.s1,this.store.s2,this.store.s3);
				this.controlX = this.store.s0;
				this.controlY = this.store.s1;
				break;
			case 84:
				this.extractArgs();
				this.controlX = 2 * this.lastX - this.controlX;
				this.controlY = 2 * this.lastY - this.controlY;
				this.lastX = this.store.s0;
				this.lastY = this.store.s1;
				this.pathContext.quadTo(this.controlX,this.controlY,this.lastX,this.lastY);
				break;
			case 86:
				this.extractArgs(false);
				this.lastY = this.store.s0 * this.sy + this.dy;
				this.pathContext.lineTo(this.lastX,this.lastY);
				break;
			case 90:case 122:
				this.lastX = 0;
				this.lastY = 0;
				break;
			case 97:
				console.log("relative elliptical_Arc - not implemented");
				this.extractArgs();
				break;
			case 99:
				this.extractArgs();
				this.controlX = this.store.s2 + this.lastX;
				this.controlY = this.store.s3 + this.lastY;
				var endX = this.store.s4 + this.lastX;
				var endY = this.store.s5 + this.lastY;
				this.pathContext.curveTo(this.store.s0 + this.lastX,this.store.s1 + this.lastY,this.controlX,this.controlY,endX,endY);
				this.lastX = endX;
				this.lastY = endY;
				break;
			case 104:
				this.extractArgs(false);
				this.lastX = this.lastX + this.store.s0 * this.sx + this.dx;
				this.pathContext.lineTo(this.lastX,this.lastY);
				break;
			case 108:
				this.extractArgs();
				this.lastX = this.store.s0 + this.lastX;
				this.lastY = this.store.s1 + this.lastY;
				this.pathContext.lineTo(this.lastX,this.lastY);
				break;
			case 109:
				this.extractArgs();
				this.lastX = this.store.s0 + this.lastX;
				this.lastY = this.store.s1 + this.lastY;
				this.pathContext.moveTo(this.lastX,this.lastY);
				break;
			case 113:
				this.extractArgs();
				this.controlX = this.lastX + this.store.s0;
				this.controlY = this.lastY + this.store.s1;
				this.lastX = this.store.s0 + this.lastX;
				this.lastY = this.store.s1 + this.lastY;
				this.pathContext.quadTo(this.controlX,this.controlY,this.lastX,this.lastY);
				break;
			case 115:
				this.extractArgs();
				this.controlX = 2 * this.lastX - this.controlX;
				this.controlY = 2 * this.lastY - this.controlY;
				var endX1 = this.store.s2 + this.lastX;
				var endY1 = this.store.s3 + this.lastY;
				this.pathContext.curveTo(this.controlX,this.controlY,this.store.s0 + this.lastX,this.store.s1 + this.lastY,endX1,endY1);
				this.controlX = this.store.s0 + this.lastX;
				this.controlY = this.store.s1 + this.lastY;
				this.lastX = endX1;
				this.lastY = endY1;
				break;
			case 116:
				this.extractArgs();
				this.controlX = 2 * this.lastX - this.controlX;
				this.controlY = 2 * this.lastY - this.controlY;
				this.lastX = this.store.s0 + this.lastY;
				this.lastY = this.store.s1 + this.lastX;
				this.pathContext.quadTo(this.controlX,this.controlY,this.lastX,this.lastY);
				break;
			case 118:
				this.extractArgs(false);
				this.lastY = this.lastY + this.store.s0 * this.sy + this.dy;
				this.pathContext.lineTo(this.lastX,this.lastY);
				break;
			default:
			}
			this.c = this.str.charCodeAt(this.pos++);
		}
		return str_;
	}
	,extractArgs: function(process) {
		if(process == null) {
			process = true;
		}
		var _this = this.store;
		_this.l = 0;
		_this.s0 = null;
		_this.s1 = null;
		_this.s2 = null;
		_this.s3 = null;
		_this.s4 = null;
		_this.s5 = null;
		this.c = this.str.charCodeAt(this.pos++);
		var temp = "";
		try {
			while(true) {
				switch(this.c) {
				case 32:case 44:
					if(temp != "") {
						if(temp == "0") {
							temp = "0.1";
						}
						if(process) {
							if((this.store.l & 1) == 0) {
								var _this1 = this.store;
								var v = parseFloat(temp) * this.sx + this.dx;
								switch(_this1.l) {
								case 0:
									_this1.s0 = v;
									break;
								case 1:
									_this1.s1 = v;
									break;
								case 2:
									_this1.s2 = v;
									break;
								case 3:
									_this1.s3 = v;
									break;
								case 4:
									_this1.s4 = v;
									break;
								case 5:
									_this1.s5 = v;
									break;
								default:
								}
								_this1.l++;
							} else {
								var _this2 = this.store;
								var v1 = parseFloat(temp) * this.sy + this.dy;
								switch(_this2.l) {
								case 0:
									_this2.s0 = v1;
									break;
								case 1:
									_this2.s1 = v1;
									break;
								case 2:
									_this2.s2 = v1;
									break;
								case 3:
									_this2.s3 = v1;
									break;
								case 4:
									_this2.s4 = v1;
									break;
								case 5:
									_this2.s5 = v1;
									break;
								default:
								}
								_this2.l++;
							}
						} else {
							var _this3 = this.store;
							var v2 = parseFloat(temp);
							switch(_this3.l) {
							case 0:
								_this3.s0 = v2;
								break;
							case 1:
								_this3.s1 = v2;
								break;
							case 2:
								_this3.s2 = v2;
								break;
							case 3:
								_this3.s3 = v2;
								break;
							case 4:
								_this3.s4 = v2;
								break;
							case 5:
								_this3.s5 = v2;
								break;
							default:
							}
							_this3.l++;
						}
						temp = "";
					}
					break;
				case 45:
					if(temp != "") {
						if(temp == "0") {
							temp = "0.1";
						}
						if(process) {
							if((this.store.l & 1) == 0) {
								var _this4 = this.store;
								var v3 = parseFloat(temp) * this.sx + this.dx;
								switch(_this4.l) {
								case 0:
									_this4.s0 = v3;
									break;
								case 1:
									_this4.s1 = v3;
									break;
								case 2:
									_this4.s2 = v3;
									break;
								case 3:
									_this4.s3 = v3;
									break;
								case 4:
									_this4.s4 = v3;
									break;
								case 5:
									_this4.s5 = v3;
									break;
								default:
								}
								_this4.l++;
							} else {
								var _this5 = this.store;
								var v4 = parseFloat(temp) * this.sy + this.dy;
								switch(_this5.l) {
								case 0:
									_this5.s0 = v4;
									break;
								case 1:
									_this5.s1 = v4;
									break;
								case 2:
									_this5.s2 = v4;
									break;
								case 3:
									_this5.s3 = v4;
									break;
								case 4:
									_this5.s4 = v4;
									break;
								case 5:
									_this5.s5 = v4;
									break;
								default:
								}
								_this5.l++;
							}
						} else {
							var _this6 = this.store;
							var v5 = parseFloat(temp);
							switch(_this6.l) {
							case 0:
								_this6.s0 = v5;
								break;
							case 1:
								_this6.s1 = v5;
								break;
							case 2:
								_this6.s2 = v5;
								break;
							case 3:
								_this6.s3 = v5;
								break;
							case 4:
								_this6.s4 = v5;
								break;
							case 5:
								_this6.s5 = v5;
								break;
							default:
							}
							_this6.l++;
						}
					}
					temp = "-";
					break;
				case 46:
					temp += ".";
					break;
				case 48:
					temp += "0";
					break;
				case 49:
					temp += "1";
					break;
				case 50:
					temp += "2";
					break;
				case 51:
					temp += "3";
					break;
				case 52:
					temp += "4";
					break;
				case 53:
					temp += "5";
					break;
				case 54:
					temp += "6";
					break;
				case 55:
					temp += "7";
					break;
				case 56:
					temp += "8";
					break;
				case 57:
					temp += "9";
					break;
				default:
					if(temp != "") {
						if(temp == "0") {
							temp = "0.1";
						}
						if(process) {
							if((this.store.l & 1) == 0) {
								var _this7 = this.store;
								var v6 = parseFloat(temp) * this.sx + this.dx;
								switch(_this7.l) {
								case 0:
									_this7.s0 = v6;
									break;
								case 1:
									_this7.s1 = v6;
									break;
								case 2:
									_this7.s2 = v6;
									break;
								case 3:
									_this7.s3 = v6;
									break;
								case 4:
									_this7.s4 = v6;
									break;
								case 5:
									_this7.s5 = v6;
									break;
								default:
								}
								_this7.l++;
							} else {
								var _this8 = this.store;
								var v7 = parseFloat(temp) * this.sy + this.dy;
								switch(_this8.l) {
								case 0:
									_this8.s0 = v7;
									break;
								case 1:
									_this8.s1 = v7;
									break;
								case 2:
									_this8.s2 = v7;
									break;
								case 3:
									_this8.s3 = v7;
									break;
								case 4:
									_this8.s4 = v7;
									break;
								case 5:
									_this8.s5 = v7;
									break;
								default:
								}
								_this8.l++;
							}
						} else {
							var _this9 = this.store;
							var v8 = parseFloat(temp);
							switch(_this9.l) {
							case 0:
								_this9.s0 = v8;
								break;
							case 1:
								_this9.s1 = v8;
								break;
							case 2:
								_this9.s2 = v8;
								break;
							case 3:
								_this9.s3 = v8;
								break;
							case 4:
								_this9.s4 = v8;
								break;
							case 5:
								_this9.s5 = v8;
								break;
							default:
							}
							_this9.l++;
						}
						temp = "";
					}
					this.pos--;
					throw "__break__";
				}
				this.c = this.str.charCodeAt(this.pos++);
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
	}
	,__class__: justPath_SvgPath
};
var khaMath_Matrix4 = function(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._30 = _30;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._31 = _31;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
	this._32 = _32;
	this._03 = _03;
	this._13 = _13;
	this._23 = _23;
	this._33 = _33;
};
khaMath_Matrix4.__name__ = true;
khaMath_Matrix4.prototype = {
	__class__: khaMath_Matrix4
};
var trilateral_geom_Algebra = function() { };
trilateral_geom_Algebra.__name__ = true;
var trilateral_geom_Contour = function(triArr_,endLine_) {
	if(endLine_ == null) {
		endLine_ = 0;
	}
	this.count = 0;
	this.triArr = triArr_;
	this.endLine = endLine_;
};
trilateral_geom_Contour.__name__ = true;
trilateral_geom_Contour.prototype = {
	reset: function() {
		this.count = 0;
		this.kax = null;
		this.kay = null;
		this.kbx = null;
		this.kby = null;
		this.kcx = null;
		this.kcy = null;
		this.nax = null;
		this.nay = null;
		this.nbx = null;
		this.nby = null;
		this.ncx = null;
		this.ncy = null;
		this.dx = null;
	}
	,__class__: trilateral_geom_Contour
};
var trilateral_path_Base = function(contour_,trilateralArray_,endLine_) {
	if(endLine_ == null) {
		endLine_ = 0;
	}
	this.width = 0.01;
	this.y = 0.;
	this.x = 0.;
	this.trilateralArray = trilateralArray_ == null ? trilateral_tri__$TrilateralArray_TrilateralArray_$Impl_$._new([]) : trilateralArray_;
	this.contour = contour_ == null ? new trilateral_geom_Contour(this.trilateralArray,endLine_) : contour_;
	this.endLine = endLine_;
	this.points = [];
	this.points[0] = [];
	this.dim = [];
};
trilateral_path_Base.__name__ = true;
trilateral_path_Base.__interfaces__ = [justPath_IPathContext];
trilateral_path_Base.prototype = {
	moveTo: function(x_,y_) {
		if(this.endLine == 2 || this.endLine == 3) {
			var _this = this.contour;
			var ax = _this.bx;
			var ay = _this.by;
			var radius = this.width / 2;
			var beta = -_this.angle1 - Math.PI / 2;
			var gamma = -_this.angle1 - Math.PI / 2 - Math.PI;
			var this1 = _this.triArr;
			var out = trilateral_tri__$TrilateralArray_TrilateralArray_$Impl_$._new([]);
			var step = Math.PI * 2 / 36;
			var dif;
			beta >= 0 && beta > Math.PI;
			gamma >= 0 && gamma > Math.PI;
			var theta = Math.abs(beta - gamma);
			var clockwise = beta < gamma;
			if(theta <= Math.PI) {
				dif = clockwise ? theta : -theta;
			} else if(clockwise) {
				dif = -(2 * Math.PI - theta);
			} else {
				dif = 2 * Math.PI - theta;
			}
			var totalSteps = Math.ceil(Math.abs(dif) / step);
			var step1 = dif / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var _g1 = 0;
			var _g = totalSteps + 1;
			while(_g1 < _g) {
				cx = ax + radius * Math.sin(angle);
				cy = ay + radius * Math.cos(angle);
				if(_g1++ != 0) {
					var t = new trilateral_tri_Trilateral(ax,ay,bx,by,cx,cy);
					out[out.length] = t;
				}
				angle += step1;
				bx = cx;
				by = cy;
			}
			var triArr = out;
			var _g2 = 0;
			while(_g2 < triArr.length) {
				var t1 = triArr[_g2];
				++_g2;
				this1[this1.length] = t1;
			}
		}
		this.x = x_;
		this.y = y_;
		var l = this.points.length;
		this.points[l] = [];
		this.points[l][0] = x_;
		this.points[l][1] = y_;
		this.dim[this.dim.length] = { minX : Infinity, maxX : -Infinity, minY : Infinity, maxY : -Infinity};
		var d = this.dim[this.dim.length - 1];
		if(x_ < d.minX) {
			d.minX = x_;
		}
		if(x_ > d.maxX) {
			d.maxX = x_;
		}
		if(y_ < d.minY) {
			d.minY = y_;
		}
		if(y_ > d.maxY) {
			d.maxY = y_;
		}
		this.contour.reset();
	}
	,lineTo: function(x_,y_) {
		if(this.widthFunction != null) {
			this.width = this.widthFunction(this.width,this.x,this.x,x_,y_);
		}
		this.line(x_,y_);
		var p = this.points[this.points.length - 1];
		var l2 = p.length;
		p[l2] = x_;
		p[l2 + 1] = y_;
		var d = this.dim[this.dim.length - 1];
		if(x_ < d.minX) {
			d.minX = x_;
		}
		if(x_ > d.maxX) {
			d.maxX = x_;
		}
		if(y_ < d.minY) {
			d.minY = y_;
		}
		if(y_ > d.maxY) {
			d.maxY = y_;
		}
		this.x = x_;
		this.y = y_;
	}
	,line: function(x_,y_) {
		console.log("lineTo( " + this.x + ", " + this.y + ", " + x_ + ", " + y_ + ", width )");
		var _this = this.contour;
		var ax_ = this.x;
		var ay_ = this.y;
		var width_ = this.width;
		_this.ax = x_;
		_this.ay = y_;
		_this.bx = ax_;
		_this.by = ay_;
		_this.halfA = Math.PI / 2;
		_this.beta = Math.PI / 2 - _this.halfA;
		_this.r = width_ / 2 * Math.cos(_this.beta);
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var dxPrev_ = _this.dx;
		var dyPrev_ = _this.dy;
		var exPrev_ = _this.ex;
		var eyPrev_ = _this.ey;
		_this.ax = ax_;
		_this.ay = ay_;
		_this.bx = x_;
		_this.by = y_;
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var radius = width_ / 2;
		var beta = -_this.angle1 - Math.PI / 2;
		var gamma = -_this.angle1 - Math.PI / 2 - Math.PI;
		var this1 = _this.triArr;
		var out = trilateral_tri__$TrilateralArray_TrilateralArray_$Impl_$._new([]);
		var step = Math.PI * 2 / 36;
		var dif;
		beta >= 0 && beta > Math.PI;
		gamma >= 0 && gamma > Math.PI;
		var theta = Math.abs(beta - gamma);
		var clockwise = beta < gamma;
		if(theta <= Math.PI) {
			dif = clockwise ? theta : -theta;
		} else if(clockwise) {
			dif = -(2 * Math.PI - theta);
		} else {
			dif = 2 * Math.PI - theta;
		}
		var totalSteps = Math.ceil(Math.abs(dif) / step);
		var step1 = dif / totalSteps;
		var angle = beta;
		var cx;
		var cy;
		var bx = 0;
		var by = 0;
		var _g1 = 0;
		var _g = totalSteps + 1;
		while(_g1 < _g) {
			cx = x_ + radius * Math.sin(angle);
			cy = y_ + radius * Math.cos(angle);
			if(_g1++ != 0) {
				var t = new trilateral_tri_Trilateral(x_,y_,bx,by,cx,cy);
				out[out.length] = t;
			}
			angle += step1;
			bx = cx;
			by = cy;
		}
		var triArr = out;
		var _g2 = 0;
		while(_g2 < triArr.length) {
			var t1 = triArr[_g2];
			++_g2;
			this1[this1.length] = t1;
		}
		var this2 = _this.triArr;
		var tri = new trilateral_tri_Trilateral(dxPrev_,dyPrev_,_this.dx,_this.dy,exPrev_,eyPrev_,0);
		this2[this2.length] = tri;
		var this3 = _this.triArr;
		var tri1 = new trilateral_tri_Trilateral(dxPrev_,dyPrev_,_this.dx,_this.dy,_this.ex,_this.ey,0);
		this3[this3.length] = tri1;
	}
	,quadTo: function(x1,y1,x2,y2) {
		this.tempArr = [];
		var p = this.tempArr;
		var ax = this.x;
		var ay = this.y;
		var x = ax - x1;
		var y = ay - y1;
		var x3 = x1 - x2;
		var y3 = y1 - y2;
		var approxDistance = Math.sqrt(x * x + y * y) + Math.sqrt(x3 * x3 + y3 * y3);
		if(approxDistance == 0) {
			approxDistance = 0.000001;
		}
		var step = Math.min(1 / (approxDistance * 0.707),trilateral_geom_Algebra.quadStep);
		var l = p.length;
		p[l++] = ax;
		p[l++] = ay;
		var t = step;
		while(t < 1.) {
			var u = 1 - t;
			p[l++] = Math.pow(u,2) * ax + 2 * u * t * x1 + Math.pow(t,2) * x2;
			var u1 = 1 - t;
			p[l++] = Math.pow(u1,2) * ay + 2 * u1 * t * y1 + Math.pow(t,2) * y2;
			t += step;
		}
		p[l++] = x2;
		p[l++] = y2;
		this.plotCoord(this.tempArr);
		this.x = x2;
		this.y = y2;
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
		this.tempArr = [];
		var p = this.tempArr;
		var ax = this.x;
		var ay = this.y;
		var x = ax - x1;
		var y = ay - y1;
		var x4 = x1 - x2;
		var y4 = y1 - y2;
		var x5 = x2 - x3;
		var y5 = y2 - y3;
		var approxDistance = Math.sqrt(x * x + y * y) + Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5);
		if(approxDistance == 0) {
			approxDistance = 0.000001;
		}
		var step = Math.min(1 / (approxDistance * 0.707),trilateral_geom_Algebra.cubicStep);
		var l = p.length;
		p[l++] = ax;
		p[l++] = ay;
		var t = step;
		while(t < 1.) {
			var u = 1 - t;
			p[l++] = Math.pow(u,3) * ax + 3 * Math.pow(u,2) * t * x1 + 3 * u * Math.pow(t,2) * x2 + Math.pow(t,3) * x3;
			var u1 = 1 - t;
			p[l++] = Math.pow(u1,3) * ay + 3 * Math.pow(u1,2) * t * y1 + 3 * u1 * Math.pow(t,2) * y2 + Math.pow(t,3) * y3;
			t += step;
		}
		p[l++] = x3;
		p[l++] = y3;
		this.plotCoord(this.tempArr);
		this.x = x3;
		this.y = y3;
	}
	,plotCoord: function(arr) {
		var l = arr.length;
		var i = 2;
		var x_ = arr[2];
		var y_ = arr[3];
		if(this.widthFunction != null) {
			this.width = this.widthFunction(this.width,this.x,this.x,x_,y_);
		}
		this.line(x_,y_);
		var p = this.points[this.points.length - 1];
		var l2 = p.length;
		p[l2] = x_;
		p[l2 + 1] = y_;
		var d = this.dim[this.dim.length - 1];
		if(x_ < d.minX) {
			d.minX = x_;
		}
		if(x_ > d.maxX) {
			d.maxX = x_;
		}
		if(y_ < d.minY) {
			d.minY = y_;
		}
		if(y_ > d.maxY) {
			d.maxY = y_;
		}
		this.x = x_;
		this.y = y_;
		while(i < l) {
			var x_1 = arr[i];
			var y_1 = arr[i + 1];
			if(this.widthFunction != null) {
				this.width = this.widthFunction(this.width,this.x,this.x,x_1,y_1);
			}
			this.line(x_1,y_1);
			var p1 = this.points[this.points.length - 1];
			var l21 = p1.length;
			p1[l21] = x_1;
			p1[l21 + 1] = y_1;
			var d1 = this.dim[this.dim.length - 1];
			if(x_1 < d1.minX) {
				d1.minX = x_1;
			}
			if(x_1 > d1.maxX) {
				d1.maxX = x_1;
			}
			if(y_1 < d1.minY) {
				d1.minY = y_1;
			}
			if(y_1 > d1.maxY) {
				d1.maxY = y_1;
			}
			this.x = x_1;
			this.y = y_1;
			i += 2;
		}
	}
	,__class__: trilateral_path_Base
};
var trilateral_path_Fine = function(contour_,trilateralArray_,endLine_) {
	trilateral_path_Base.call(this,contour_,trilateralArray_,endLine_);
};
trilateral_path_Fine.__name__ = true;
trilateral_path_Fine.__super__ = trilateral_path_Base;
trilateral_path_Fine.prototype = $extend(trilateral_path_Base.prototype,{
	line: function(x_,y_) {
		var pos_y;
		var pos_x;
		var pos_y1;
		var pos_x1;
		var pos_y2;
		var pos_x2;
		var pos_y3;
		var pos_x3;
		var _this = this.contour;
		var ax_ = this.x;
		var ay_ = this.y;
		var width_ = this.width;
		_this.halfA = Math.PI / 2;
		_this.ax = x_;
		_this.ay = y_;
		_this.bx = ax_;
		_this.by = ay_;
		_this.beta = Math.PI / 2 - _this.halfA;
		_this.r = width_ / 2 * Math.cos(_this.beta);
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		_this.ax = ax_;
		_this.ay = ay_;
		_this.bx = x_;
		_this.by = y_;
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var x = _this.dxOld - x_;
		var y = _this.dyOld - y_;
		var x1 = _this.exOld - x_;
		var y1 = _this.eyOld - y_;
		var clockWise = x * x + y * y > x1 * x1 + y1 * y1;
		var theta0;
		var theta1;
		if(clockWise) {
			theta0 = -Math.atan2(_this.ay - _this.dyOld,_this.ax - _this.dxOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.eyPrev,_this.ax - _this.exPrev) - Math.PI / 2;
		} else {
			theta0 = -Math.atan2(_this.ay - _this.eyOld,_this.ax - _this.exOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.dyPrev,_this.ax - _this.dxPrev) - Math.PI / 2;
		}
		var dif;
		theta0 >= 0 && theta0 > Math.PI;
		theta1 >= 0 && theta1 > Math.PI;
		var theta = Math.abs(theta0 - theta1);
		var clockwise = theta0 < theta1;
		if(theta <= Math.PI) {
			dif = clockwise ? theta : -theta;
		} else if(clockwise) {
			dif = -(2 * Math.PI - theta);
		} else {
			dif = 2 * Math.PI - theta;
		}
		var h = width_ * Math.sin(Math.abs(dif) / 2);
		var f;
		if(theta0 <= Math.PI && theta0 > -Math.PI) {
			f = theta0;
		} else {
			var a = (theta0 + Math.PI) % (2 * Math.PI);
			if(a >= 0) {
				f = a - Math.PI;
			} else {
				f = a + Math.PI;
			}
		}
		var delta = f + dif / 2 + Math.PI;
		_this.jx = _this.ax + h * Math.sin(delta);
		_this.jy = _this.ay + h * Math.cos(delta);
		if(_this.count == 0 && (_this.endLine == 1 || _this.endLine == 3)) {
			var ax = _this.ax;
			var ay = _this.ay;
			var radius = width_ / 2;
			var beta = -_this.angle1 - Math.PI / 2;
			var gamma = -_this.angle1 - Math.PI / 2 + Math.PI;
			var this1 = _this.triArr;
			var out = trilateral_tri__$TrilateralArray_TrilateralArray_$Impl_$._new([]);
			var step = Math.PI * 2 / 36;
			var dif1;
			beta >= 0 && beta > Math.PI;
			gamma >= 0 && gamma > Math.PI;
			var theta2 = Math.abs(beta - gamma);
			var clockwise1 = beta < gamma;
			if(theta2 <= Math.PI) {
				dif1 = clockwise1 ? theta2 : -theta2;
			} else if(clockwise1) {
				dif1 = -(2 * Math.PI - theta2);
			} else {
				dif1 = 2 * Math.PI - theta2;
			}
			var totalSteps = Math.ceil(Math.abs(dif1) / step);
			var step1 = dif1 / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var _g1 = 0;
			var _g = totalSteps + 1;
			while(_g1 < _g) {
				cx = ax + radius * Math.sin(angle);
				cy = ay + radius * Math.cos(angle);
				if(_g1++ != 0) {
					var t = new trilateral_tri_Trilateral(ax,ay,bx,by,cx,cy);
					out[out.length] = t;
				}
				angle += step1;
				bx = cx;
				by = cy;
			}
			var triArr = out;
			var _g2 = 0;
			while(_g2 < triArr.length) {
				var t1 = triArr[_g2];
				++_g2;
				this1[this1.length] = t1;
			}
		}
		var radius1 = width_ / 2;
		var out1 = trilateral_tri__$TrilateralArray_TrilateralArray_$Impl_$._new([]);
		var totalSteps1 = Math.ceil(Math.abs(dif) / (Math.PI * 2 / 36));
		var step2 = dif / totalSteps1;
		var angle1 = theta0;
		var cx1;
		var cy1;
		var bx1 = 0;
		var by1 = 0;
		var _g11 = 0;
		var _g3 = totalSteps1 + 1;
		while(_g11 < _g3) {
			cx1 = ax_ + radius1 * Math.sin(angle1);
			cy1 = ay_ + radius1 * Math.cos(angle1);
			if(_g11++ != 0) {
				var t2 = new trilateral_tri_Trilateral(ax_,ay_,bx1,by1,cx1,cy1);
				out1[out1.length] = t2;
			}
			angle1 += step2;
			bx1 = cx1;
			by1 = cy1;
		}
		var this2 = _this.triArr;
		var _g4 = 0;
		while(_g4 < out1.length) {
			var t3 = out1[_g4];
			++_g4;
			this2[this2.length] = t3;
		}
		if(clockWise && !_this.lastClock) {
			if(_this.count == 1) {
				_this.triArr[_this.quadIndex + 1] = new trilateral_tri_Trilateral(_this.nax,_this.nay,_this.nbx,_this.nby,_this.ncx,_this.ncy,7);
			} else {
				_this.triArr[_this.quadIndex + 1] = new trilateral_tri_Trilateral(_this.nax,_this.nay,_this.nbx,_this.nby,_this.jxOld,_this.jyOld,7);
			}
			_this.triArr[_this.quadIndex] = new trilateral_tri_Trilateral(_this.kax,_this.kay,_this.kbx,_this.kby,_this.jx,_this.jy,6);
		}
		if(clockWise && _this.lastClock) {
			if(_this.count == 1) {
				_this.triArr[_this.quadIndex] = new trilateral_tri_Trilateral(_this.kax,_this.kay,_this.kbx,_this.kby,_this.jx,_this.jy,6);
				_this.triArr[_this.quadIndex + 1] = new trilateral_tri_Trilateral(_this.nax,_this.nay,_this.nbx,_this.nby,_this.ncx,_this.ncy,7);
			} else {
				_this.triArr[_this.quadIndex] = new trilateral_tri_Trilateral(_this.jxOld,_this.jyOld,_this.kbx,_this.kby,_this.jx,_this.jy,6);
				_this.triArr[_this.quadIndex + 1] = new trilateral_tri_Trilateral(_this.jxOld,_this.jyOld,_this.nbx,_this.nby,_this.ncx,_this.ncy,7);
			}
		}
		if(!clockWise && !_this.lastClock) {
			_this.triArr[_this.quadIndex] = new trilateral_tri_Trilateral(_this.kax,_this.kay,_this.jx,_this.jy,_this.kcx,_this.kcy,6);
			if(_this.count == 1) {
				_this.triArr[_this.quadIndex + 1] = new trilateral_tri_Trilateral(_this.nax,_this.nay,_this.jx,_this.jy,_this.ncx,_this.ncy,7);
			} else {
				_this.triArr[_this.quadIndex + 1] = new trilateral_tri_Trilateral(_this.nax,_this.nay,_this.jx,_this.jy,_this.jxOld,_this.jyOld,7);
			}
		}
		if(!clockWise && _this.lastClock) {
			if(_this.count == 1) {
				_this.triArr[_this.quadIndex] = new trilateral_tri_Trilateral(_this.kax,_this.kay,_this.jx,_this.jy,_this.kcx,_this.kcy,6);
				_this.triArr[_this.quadIndex + 1] = new trilateral_tri_Trilateral(_this.nax,_this.nay,_this.jx,_this.jy,_this.ncx,_this.ncy,7);
			} else {
				_this.triArr[_this.quadIndex] = new trilateral_tri_Trilateral(_this.jxOld,_this.jyOld,_this.jx,_this.jy,_this.kcx,_this.kcy,6);
				_this.triArr[_this.quadIndex + 1] = new trilateral_tri_Trilateral(_this.jxOld,_this.jyOld,_this.jx,_this.jy,_this.ncx,_this.ncy,7);
			}
		}
		_this.quadIndex = _this.triArr.length;
		if(_this.count == 0) {
			var this3 = _this.triArr;
			var tri = new trilateral_tri_Trilateral(_this.dxPrev,_this.dyPrev,_this.dx,_this.dy,_this.ex,_this.ey,8);
			this3[this3.length] = tri;
			var this4 = _this.triArr;
			var tri1 = new trilateral_tri_Trilateral(_this.dxPrev,_this.dyPrev,_this.dx,_this.dy,_this.exPrev,_this.eyPrev,12);
			this4[this4.length] = tri1;
		} else {
			if(clockWise && !_this.lastClock) {
				var this5 = _this.triArr;
				var tri2 = new trilateral_tri_Trilateral(_this.jx,_this.jy,_this.dx,_this.dy,_this.ex,_this.ey,8);
				this5[this5.length] = tri2;
				var this6 = _this.triArr;
				var tri3 = new trilateral_tri_Trilateral(_this.jx,_this.jy,_this.dx,_this.dy,_this.exPrev,_this.eyPrev,12);
				this6[this6.length] = tri3;
			}
			if(clockWise && _this.lastClock) {
				var this7 = _this.triArr;
				var tri4 = new trilateral_tri_Trilateral(_this.jx,_this.jy,_this.dx,_this.dy,_this.ex,_this.ey,8);
				this7[this7.length] = tri4;
				var this8 = _this.triArr;
				var tri5 = new trilateral_tri_Trilateral(_this.jx,_this.jy,_this.dx,_this.dy,_this.exPrev,_this.eyPrev,12);
				this8[this8.length] = tri5;
			}
			if(!clockWise && !_this.lastClock) {
				var this9 = _this.triArr;
				var tri6 = new trilateral_tri_Trilateral(_this.dxPrev,_this.dyPrev,_this.dx,_this.dy,_this.jx,_this.jy,8);
				this9[this9.length] = tri6;
				var this10 = _this.triArr;
				var tri7 = new trilateral_tri_Trilateral(_this.dxPrev,_this.dyPrev,_this.dx,_this.dy,_this.ex,_this.ey,12);
				this10[this10.length] = tri7;
			}
			if(!clockWise && _this.lastClock) {
				var this11 = _this.triArr;
				var tri8 = new trilateral_tri_Trilateral(_this.jx,_this.jy,_this.dx,_this.dy,_this.ex,_this.ey,8);
				this11[this11.length] = tri8;
				var this12 = _this.triArr;
				var tri9 = new trilateral_tri_Trilateral(_this.dxPrev,_this.dyPrev,_this.jx,_this.jy,_this.ex,_this.ey,12);
				this12[this12.length] = tri9;
			}
		}
		_this.nax = _this.dxPrev;
		_this.nay = _this.dyPrev;
		_this.nbx = _this.dx;
		_this.nby = _this.dy;
		_this.ncx = _this.exPrev;
		_this.ncy = _this.eyPrev;
		_this.kax = _this.dxPrev;
		_this.kay = _this.dyPrev;
		_this.kbx = _this.dx;
		_this.kby = _this.dy;
		_this.kcx = _this.ex;
		_this.kcy = _this.ey;
		if(clockWise) {
			var this13 = _this.triArr;
			var tri10 = new trilateral_tri_Trilateral(_this.ax,_this.ay,_this.dxOld,_this.dyOld,_this.jx,_this.jy,1);
			this13[this13.length] = tri10;
			var this14 = _this.triArr;
			var tri11 = new trilateral_tri_Trilateral(_this.ax,_this.ay,_this.exPrev,_this.eyPrev,_this.jx,_this.jy,3);
			this14[this14.length] = tri11;
			var oldx_ = _this.dxOld;
			var oldy_ = _this.dyOld;
			var prevx_ = _this.exPrev;
			var prevy_ = _this.eyPrev;
			var out2 = trilateral_tri__$TrilateralArray_TrilateralArray_$Impl_$._new([]);
			var pi = Math.PI;
			var theta3 = pi / 2;
			var step3 = pi * 2 / 36;
			var bx2;
			var by2;
			var cx2;
			var cy2;
			var _g12 = 0;
			while(_g12 < 36) {
				++_g12;
				bx2 = oldx_ + 0.01 * Math.sin(theta3);
				by2 = oldy_ + 0.01 * Math.cos(theta3);
				theta3 += step3;
				cx2 = oldx_ + 0.01 * Math.sin(theta3);
				cy2 = oldy_ + 0.01 * Math.cos(theta3);
				var t4 = new trilateral_tri_Trilateral(oldx_,oldy_,bx2,by2,cx2,cy2);
				out2[out2.length] = t4;
				t4.mark = 4;
			}
			var this15 = _this.triArr;
			var _g5 = 0;
			while(_g5 < out2.length) {
				var t5 = out2[_g5];
				++_g5;
				this15[this15.length] = t5;
			}
			var out3 = trilateral_tri__$TrilateralArray_TrilateralArray_$Impl_$._new([]);
			var pi1 = Math.PI;
			var theta4 = pi1 / 2;
			var step4 = pi1 * 2 / 36;
			var bx3;
			var by3;
			var cx3;
			var cy3;
			var _g13 = 0;
			while(_g13 < 36) {
				++_g13;
				bx3 = prevx_ + 0.01 * Math.sin(theta4);
				by3 = prevy_ + 0.01 * Math.cos(theta4);
				theta4 += step4;
				cx3 = prevx_ + 0.01 * Math.sin(theta4);
				cy3 = prevy_ + 0.01 * Math.cos(theta4);
				var t6 = new trilateral_tri_Trilateral(prevx_,prevy_,bx3,by3,cx3,cy3);
				out3[out3.length] = t6;
				t6.mark = 3;
			}
			var this16 = _this.triArr;
			var _g6 = 0;
			while(_g6 < out3.length) {
				var t7 = out3[_g6];
				++_g6;
				this16[this16.length] = t7;
			}
			pos_x3 = _this.ax;
			pos_y3 = _this.ay;
			var out4 = trilateral_tri__$TrilateralArray_TrilateralArray_$Impl_$._new([]);
			var pi2 = Math.PI;
			var theta5 = pi2 / 2;
			var step5 = pi2 * 2 / 36;
			var bx4;
			var by4;
			var cx4;
			var cy4;
			var _g14 = 0;
			while(_g14 < 36) {
				++_g14;
				bx4 = pos_x3 + 0.01 * Math.sin(theta5);
				by4 = pos_y3 + 0.01 * Math.cos(theta5);
				theta5 += step5;
				cx4 = pos_x3 + 0.01 * Math.sin(theta5);
				cy4 = pos_y3 + 0.01 * Math.cos(theta5);
				var t8 = new trilateral_tri_Trilateral(pos_x3,pos_y3,bx4,by4,cx4,cy4);
				out4[out4.length] = t8;
				t8.mark = 10;
			}
			var this17 = _this.triArr;
			var _g7 = 0;
			while(_g7 < out4.length) {
				var t9 = out4[_g7];
				++_g7;
				this17[this17.length] = t9;
			}
			pos_x2 = _this.jx;
			pos_y2 = _this.jy;
			var out5 = trilateral_tri__$TrilateralArray_TrilateralArray_$Impl_$._new([]);
			var pi3 = Math.PI;
			var theta6 = pi3 / 2;
			var step6 = pi3 * 2 / 36;
			var bx5;
			var by5;
			var cx5;
			var cy5;
			var _g15 = 0;
			while(_g15 < 36) {
				++_g15;
				bx5 = pos_x2 + 0.01 * Math.sin(theta6);
				by5 = pos_y2 + 0.01 * Math.cos(theta6);
				theta6 += step6;
				cx5 = pos_x2 + 0.01 * Math.sin(theta6);
				cy5 = pos_y2 + 0.01 * Math.cos(theta6);
				var t10 = new trilateral_tri_Trilateral(pos_x2,pos_y2,bx5,by5,cx5,cy5);
				out5[out5.length] = t10;
				t10.mark = 5;
			}
			var this18 = _this.triArr;
			var _g8 = 0;
			while(_g8 < out5.length) {
				var t11 = out5[_g8];
				++_g8;
				this18[this18.length] = t11;
			}
		} else {
			var this19 = _this.triArr;
			var tri12 = new trilateral_tri_Trilateral(_this.ax,_this.ay,_this.exOld,_this.eyOld,_this.jx,_this.jy,1);
			this19[this19.length] = tri12;
			var this20 = _this.triArr;
			var tri13 = new trilateral_tri_Trilateral(_this.ax,_this.ay,_this.dxPrev,_this.dyPrev,_this.jx,_this.jy,3);
			this20[this20.length] = tri13;
			var oldx_1 = _this.exOld;
			var oldy_1 = _this.eyOld;
			var prevx_1 = _this.dxPrev;
			var prevy_1 = _this.dyPrev;
			var out6 = trilateral_tri__$TrilateralArray_TrilateralArray_$Impl_$._new([]);
			var pi4 = Math.PI;
			var theta7 = pi4 / 2;
			var step7 = pi4 * 2 / 36;
			var bx6;
			var by6;
			var cx6;
			var cy6;
			var _g16 = 0;
			while(_g16 < 36) {
				++_g16;
				bx6 = oldx_1 + 0.01 * Math.sin(theta7);
				by6 = oldy_1 + 0.01 * Math.cos(theta7);
				theta7 += step7;
				cx6 = oldx_1 + 0.01 * Math.sin(theta7);
				cy6 = oldy_1 + 0.01 * Math.cos(theta7);
				var t12 = new trilateral_tri_Trilateral(oldx_1,oldy_1,bx6,by6,cx6,cy6);
				out6[out6.length] = t12;
				t12.mark = 4;
			}
			var this21 = _this.triArr;
			var _g9 = 0;
			while(_g9 < out6.length) {
				var t13 = out6[_g9];
				++_g9;
				this21[this21.length] = t13;
			}
			var out7 = trilateral_tri__$TrilateralArray_TrilateralArray_$Impl_$._new([]);
			var pi5 = Math.PI;
			var theta8 = pi5 / 2;
			var step8 = pi5 * 2 / 36;
			var bx7;
			var by7;
			var cx7;
			var cy7;
			var _g17 = 0;
			while(_g17 < 36) {
				++_g17;
				bx7 = prevx_1 + 0.01 * Math.sin(theta8);
				by7 = prevy_1 + 0.01 * Math.cos(theta8);
				theta8 += step8;
				cx7 = prevx_1 + 0.01 * Math.sin(theta8);
				cy7 = prevy_1 + 0.01 * Math.cos(theta8);
				var t14 = new trilateral_tri_Trilateral(prevx_1,prevy_1,bx7,by7,cx7,cy7);
				out7[out7.length] = t14;
				t14.mark = 3;
			}
			var this22 = _this.triArr;
			var _g10 = 0;
			while(_g10 < out7.length) {
				var t15 = out7[_g10];
				++_g10;
				this22[this22.length] = t15;
			}
			pos_x1 = _this.ax;
			pos_y1 = _this.ay;
			var out8 = trilateral_tri__$TrilateralArray_TrilateralArray_$Impl_$._new([]);
			var pi6 = Math.PI;
			var theta9 = pi6 / 2;
			var step9 = pi6 * 2 / 36;
			var bx8;
			var by8;
			var cx8;
			var cy8;
			var _g18 = 0;
			while(_g18 < 36) {
				++_g18;
				bx8 = pos_x1 + 0.01 * Math.sin(theta9);
				by8 = pos_y1 + 0.01 * Math.cos(theta9);
				theta9 += step9;
				cx8 = pos_x1 + 0.01 * Math.sin(theta9);
				cy8 = pos_y1 + 0.01 * Math.cos(theta9);
				var t16 = new trilateral_tri_Trilateral(pos_x1,pos_y1,bx8,by8,cx8,cy8);
				out8[out8.length] = t16;
				t16.mark = 10;
			}
			var this23 = _this.triArr;
			var _g19 = 0;
			while(_g19 < out8.length) {
				var t17 = out8[_g19];
				++_g19;
				this23[this23.length] = t17;
			}
			pos_x = _this.jx;
			pos_y = _this.jy;
			var out9 = trilateral_tri__$TrilateralArray_TrilateralArray_$Impl_$._new([]);
			var pi7 = Math.PI;
			var theta10 = pi7 / 2;
			var step10 = pi7 * 2 / 36;
			var bx9;
			var by9;
			var cx9;
			var cy9;
			var _g110 = 0;
			while(_g110 < 36) {
				++_g110;
				bx9 = pos_x + 0.01 * Math.sin(theta10);
				by9 = pos_y + 0.01 * Math.cos(theta10);
				theta10 += step10;
				cx9 = pos_x + 0.01 * Math.sin(theta10);
				cy9 = pos_y + 0.01 * Math.cos(theta10);
				var t18 = new trilateral_tri_Trilateral(pos_x,pos_y,bx9,by9,cx9,cy9);
				out9[out9.length] = t18;
				t18.mark = 5;
			}
			var this24 = _this.triArr;
			var _g20 = 0;
			while(_g20 < out9.length) {
				var t19 = out9[_g20];
				++_g20;
				this24[this24.length] = t19;
			}
		}
		_this.jxOld = _this.jx;
		_this.jyOld = _this.jy;
		_this.lastClock = clockWise;
		_this.count++;
	}
	,__class__: trilateral_path_Fine
});
var trilateral_path_RoundEnd = function(contour_,trilateralArray_) {
	trilateral_path_Base.call(this,contour_,trilateralArray_);
};
trilateral_path_RoundEnd.__name__ = true;
trilateral_path_RoundEnd.__super__ = trilateral_path_Base;
trilateral_path_RoundEnd.prototype = $extend(trilateral_path_Base.prototype,{
	line: function(x_,y_) {
		var _this = this.contour;
		var ax_ = this.x;
		var ay_ = this.y;
		var width_ = this.width;
		var endLineCurve = 3;
		_this.ax = x_;
		_this.ay = y_;
		_this.bx = ax_;
		_this.by = ay_;
		_this.halfA = Math.PI / 2;
		_this.beta = Math.PI / 2 - _this.halfA;
		_this.r = width_ / 2 * Math.cos(_this.beta);
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var dxPrev_ = _this.dx;
		var dyPrev_ = _this.dy;
		var exPrev_ = _this.ex;
		var eyPrev_ = _this.ey;
		_this.ax = ax_;
		_this.ay = ay_;
		_this.bx = x_;
		_this.by = y_;
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		if(endLineCurve == null) {
			var radius = width_ / 2;
			var beta = -_this.angle1 - Math.PI / 2;
			var gamma = -_this.angle1 - Math.PI / 2 - Math.PI;
			var this1 = _this.triArr;
			var out = trilateral_tri__$TrilateralArray_TrilateralArray_$Impl_$._new([]);
			var step = Math.PI * 2 / 36;
			var dif;
			beta >= 0 && beta > Math.PI;
			gamma >= 0 && gamma > Math.PI;
			var theta = Math.abs(beta - gamma);
			var clockwise = beta < gamma;
			if(theta <= Math.PI) {
				dif = clockwise ? theta : -theta;
			} else if(clockwise) {
				dif = -(2 * Math.PI - theta);
			} else {
				dif = 2 * Math.PI - theta;
			}
			var totalSteps = Math.ceil(Math.abs(dif) / step);
			var step1 = dif / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var _g1 = 0;
			var _g = totalSteps + 1;
			while(_g1 < _g) {
				cx = x_ + radius * Math.sin(angle);
				cy = y_ + radius * Math.cos(angle);
				if(_g1++ != 0) {
					var t = new trilateral_tri_Trilateral(x_,y_,bx,by,cx,cy);
					out[out.length] = t;
				}
				angle += step1;
				bx = cx;
				by = cy;
			}
			var triArr = out;
			var _g2 = 0;
			while(_g2 < triArr.length) {
				var t1 = triArr[_g2];
				++_g2;
				this1[this1.length] = t1;
			}
		} else {
			switch(endLineCurve) {
			case 0:
				break;
			case 1:
				break;
			case 3:
				var radius1 = width_ / 2;
				var beta1 = -_this.angle1 - Math.PI / 2;
				var gamma1 = -_this.angle1 - Math.PI / 2 - Math.PI;
				var this2 = _this.triArr;
				var out1 = trilateral_tri__$TrilateralArray_TrilateralArray_$Impl_$._new([]);
				var step2 = Math.PI * 2 / 36;
				var dif1;
				beta1 >= 0 && beta1 > Math.PI;
				gamma1 >= 0 && gamma1 > Math.PI;
				var theta1 = Math.abs(beta1 - gamma1);
				var clockwise1 = beta1 < gamma1;
				if(theta1 <= Math.PI) {
					dif1 = clockwise1 ? theta1 : -theta1;
				} else if(clockwise1) {
					dif1 = -(2 * Math.PI - theta1);
				} else {
					dif1 = 2 * Math.PI - theta1;
				}
				var totalSteps1 = Math.ceil(Math.abs(dif1) / step2);
				var step3 = dif1 / totalSteps1;
				var angle1 = beta1;
				var cx1;
				var cy1;
				var bx1 = 0;
				var by1 = 0;
				var _g11 = 0;
				var _g3 = totalSteps1 + 1;
				while(_g11 < _g3) {
					cx1 = x_ + radius1 * Math.sin(angle1);
					cy1 = y_ + radius1 * Math.cos(angle1);
					if(_g11++ != 0) {
						var t2 = new trilateral_tri_Trilateral(x_,y_,bx1,by1,cx1,cy1);
						out1[out1.length] = t2;
					}
					angle1 += step3;
					bx1 = cx1;
					by1 = cy1;
				}
				var triArr1 = out1;
				var _g4 = 0;
				while(_g4 < triArr1.length) {
					var t3 = triArr1[_g4];
					++_g4;
					this2[this2.length] = t3;
				}
				break;
			default:
			}
		}
		var this3 = _this.triArr;
		var tri = new trilateral_tri_Trilateral(dxPrev_,dyPrev_,_this.dx,_this.dy,exPrev_,eyPrev_,0);
		this3[this3.length] = tri;
		var this4 = _this.triArr;
		var tri1 = new trilateral_tri_Trilateral(dxPrev_,dyPrev_,_this.dx,_this.dy,_this.ex,_this.ey,0);
		this4[this4.length] = tri1;
	}
	,__class__: trilateral_path_RoundEnd
});
var trilateral_tri_Trilateral = function(ax_,ay_,bx_,by_,cx_,cy_,mark_) {
	if(mark_ == null) {
		mark_ = 0;
	}
	this.mark = 0;
	this.ax = ax_;
	this.ay = ay_;
	this.bx = bx_;
	this.by = by_;
	this.cx = cx_;
	this.cy = cy_;
	this.windingAdjusted = this.adjustWinding();
	if(this.windingAdjusted) {
		this.ax = ax_;
		this.ay = ay_;
		this.bx = cx_;
		this.by = cy_;
		this.cx = bx_;
		this.cy = by_;
	}
	this.mark = mark_;
};
trilateral_tri_Trilateral.__name__ = true;
trilateral_tri_Trilateral.prototype = {
	adjustWinding: function() {
		return this.ax * this.by - this.bx * this.ay + (this.bx * this.cy - this.cx * this.by) + (this.cx * this.ay - this.ax * this.cy) > 0;
	}
	,__class__: trilateral_tri_Trilateral
};
var trilateral_tri_Triangle = function() { };
trilateral_tri_Triangle.__name__ = true;
trilateral_tri_Triangle.fromTrilateral = function(id_,tri,depth_,colorID_) {
	var t = Type.createEmptyInstance(trilateral_tri_Triangle);
	t.id = id_;
	t.ax = tri.ax;
	t.ay = tri.ay;
	t.bx = tri.bx;
	t.by = tri.by;
	t.cx = tri.cx;
	t.cy = tri.cy;
	t.mark = tri.mark;
	t.depth = depth_;
	t.alpha = 1.;
	t.colorID = colorID_;
	t.colorA = colorID_;
	t.colorB = colorID_;
	t.colorC = colorID_;
	t.windingAdjusted = tri.windingAdjusted;
	return t;
};
trilateral_tri_Triangle.__super__ = trilateral_tri_Trilateral;
trilateral_tri_Triangle.prototype = $extend(trilateral_tri_Trilateral.prototype,{
	__class__: trilateral_tri_Triangle
});
var trilateral_tri__$TriangleArray_TriangleArray_$Impl_$ = {};
trilateral_tri__$TriangleArray_TriangleArray_$Impl_$.__name__ = true;
trilateral_tri__$TriangleArray_TriangleArray_$Impl_$._new = function(t) {
	return t == null ? trilateral_tri__$TriangleArray_TriangleArray_$Impl_$._new([]) : t;
};
var trilateral_tri__$TrilateralArray_TrilateralArray_$Impl_$ = {};
trilateral_tri__$TrilateralArray_TrilateralArray_$Impl_$.__name__ = true;
trilateral_tri__$TrilateralArray_TrilateralArray_$Impl_$._new = function(t) {
	return t == null ? trilateral_tri__$TrilateralArray_TrilateralArray_$Impl_$._new([]) : t;
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
htmlHelper_tools_AnimateTimer.counter = 0;
js_Boot.__toStr = ({ }).toString;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
trilateral_geom_Algebra.quadStep = 0.03;
trilateral_geom_Algebra.cubicStep = 0.03;
Test.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
